language: cpp

env:
  global:
    - LANG="zh_CN.UTF-8"
    - CMAKE_PREFIX=$HOME/prebuilt/cmake ;
    - CMAKE_LINUX_URL=https://cmake.org/files/v3.10/cmake-3.10.2-Linux-x86_64.sh ;

matrix:
  include:
    - os: osx
      env: USE_CC=clang USE_CXX=clang++ CMAKE_BIN=cmake CTEST_BIN=ctest
    - os: linux
      dist: trusty
      sudo: required
      env: USE_CC=gcc USE_CXX=g++ CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
    - os: linux
      dist: trusty
      sudo: required
      env: USE_CC=gcc-4.4 USE_CXX=g++-4.4 CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-4.4
            - g++-4.4-multilib
            - gcc-4.4
            - gcc-4.4-multilib
    - os: linux
      dist: trusty
      sudo: required
      env: USE_CC=gcc-4.9 USE_CXX=g++-4.9 CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-4.9
            - gcc-4.9-multilib
            - g++-4.9
            - g++-4.9-multilib
    - os: linux
      dist: trusty
      sudo: required
      env: USE_CC=gcc-7 USE_CXX=g++-7 CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - gcc-7-multilib
            - g++-7
            - g++-7-multilib
    # - os: linux
    #   dist: trusty
    #   sudo: required
    #   env: USE_CC=clang USE_CXX=clang++ CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
    - os: linux
      dist: trusty
      sudo: required
      env: COVERALLS_SERVICE_NAME=travis-ci GCOV_FLAGS='--coverage -fprofile-arcs -ftest-coverage' CMAKE_BIN=$CMAKE_PREFIX/bin/cmake CTEST_BIN=$CMAKE_PREFIX/bin/ctest
      # COVERALLS_REPO_TOKEN is set in travis-ci
      script:
        - export CC=$USE_CC ;
        - export CXX=$USE_CXX ;
        - REPO_DIR=$PWD;
        - if [ -e "$REPO_DIR/build" ]; then rm -rf "$REPO_DIR/build"; fi
        - mkdir -p $REPO_DIR/build && cd $REPO_DIR/build ;
        - echo "$CMAKE_BIN .. -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON" ;
        - $CMAKE_BIN .. "-DCMAKE_C_FLAGS=$GCOV_FLAGS" "-DCMAKE_CXX_FLAGS=$GCOV_FLAGS" "-DCMAKE_EXE_LINKER_FLAGS=$GCOV_FLAGS" -DCMAKE_BUILD_TYPE=Debug -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON ;
        - $CMAKE_BIN --build .
      after_success:
        - pip install --user cpp-coveralls
        - coveralls -r .. --gcov-options '\-lp' -e sample -e test -e build/CMakeFiles

before_install:
    - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get -qq update; fi
    - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; brew upgrade cmake; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo add-apt-repository -y "deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.8 main"; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add - ; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update -qq; fi
#   - if [ "$TRAVIS_OS_NAME" == "linux" ]; then sudo apt-get update; fi

install:
    - if [ "$TRAVIS_OS_NAME" == "linux" ] ; then

          if [ ! -e "$CMAKE_BIN" ]; then

            mkdir -p "$CMAKE_PREFIX";

            curl --insecure -L "$CMAKE_LINUX_URL" -o cmake-linux.sh ;

            bash cmake-linux.sh --skip-license --prefix=$CMAKE_PREFIX ;

          fi

      fi

script:
  - export CC=$USE_CC ;
  - export CXX=$USE_CXX ;
  - REPO_DIR=$PWD;
  - if [ -e "$REPO_DIR/build" ]; then rm -rf "$REPO_DIR/build"; fi
  - mkdir -p $REPO_DIR/build && cd $REPO_DIR/build ;
  - echo "$CMAKE_BIN .. -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DCMAKE_C_COMPILER=$USE_CC -DCMAKE_CXX_COMPILER=$USE_CXX" ;
  - $CMAKE_BIN .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DPROJECT_ENABLE_UNITTEST=ON -DPROJECT_ENABLE_SAMPLE=ON -DCMAKE_C_COMPILER=$USE_CC -DCMAKE_CXX_COMPILER=$USE_CXX ;
  - $CMAKE_BIN --build .


after_success:
  - $CTEST_BIN . -V

cache:
  apt: true
  ccache: true
  pip: true
  directories:
  - $CMAKE_PREFIX

branches:
  only:
    - master

notifications:
  email:
    recipients:
      - admin@owent.net
      - owt5008137@live.com
    on_success: change
    on_failure: change
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/3c7b3960fa5b787ad061
    on_success: change  # options: [always|never|change] default: always
    on_failure: change  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always
